AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'sam-app

  Sample SAM Template for sam-app

  '
Parameters:
  PollyOutputBucket:
    Type: String
    Default: matwerber.info
  IamExternalId:
    Type: String
    Default: flashcard-app-werberm-23423423
Globals:
  Function:
    Timeout: 3
Resources:
  FlashcardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: card_id
        AttributeType: S
      KeySchema:
      - AttributeName: card_id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  DdbStreamProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/9cb32d2d0eccd6c2bc82cc6c064b2176
      Handler: app.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          POLLY_SQS_QUEUE:
            Ref: PollySynthesisQueue
      Events:
        ProcessStreamEvent:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - FlashcardTable
              - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
            Enabled: true
      Policies:
      - Statement:
        - Sid: PollyPermissions
          Effect: Allow
          Action:
          - polly:StartSpeechSynthesisTask
          - polly:GetSpeechSynthesisTask
          - polly:ListSpeechSynthesisTasks
          Resource:
          - '*'
      - Statement:
        - Sid: S3PermissionForPollySynthesis
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${PollyOutputBucket}/*
      - Statement:
        - Sid: PollySynthesisSnsTopicWrite
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - Ref: PollySynthesisTopic
      - Statement:
        - Sid: AppsyncPermission
          Effect: Allow
          Action:
          - appsync:GraphQL
          Resource:
          - Fn::Sub: ${GraphqlApi.Arn}/*
      - Statement:
        - Sid: DynamoDB
          Effect: Allow
          Action:
          - dynamodb:*
          Resource:
          - Fn::Sub: ${FlashcardTable.Arn}/*
          - Fn::Sub: ${FlashcardTable.Arn}
      - Statement:
        - Sid: SQS
          Effect: Allow
          Action:
          - sqs:*
          Resource:
          - Fn::GetAtt:
            - PollySynthesisQueue
            - Arn
  PollySynthesisQueue:
    Type: AWS::SQS::Queue
    Properties:
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 30
  SubmitPollySynthesisTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/064bfb5a1f925bdd30153dda0fed106c
      Handler: app.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          POLLY_SQS_QUEUE:
            Ref: PollySynthesisQueue
          POLLY_SNS_TOPIC:
            Ref: PollySynthesisTopic
          POLLY_OUTPUT_BUCKET:
            Ref: PollyOutputBucket
          APPSYNC_ENDPOINT:
            Fn::GetAtt:
            - GraphqlApi
            - GraphQLUrl
          FLASHCARD_TABLE:
            Ref: FlashcardTable
      Events:
        SynthesisSqsEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - PollySynthesisQueue
              - Arn
            BatchSize: 10
            Enabled: true
      Policies:
      - Statement:
        - Sid: PollyPermissions
          Effect: Allow
          Action:
          - polly:StartSpeechSynthesisTask
          - polly:GetSpeechSynthesisTask
          - polly:ListSpeechSynthesisTasks
          Resource:
          - '*'
      - Statement:
        - Sid: S3PermissionForPollySynthesis
          Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${PollyOutputBucket}/*
      - Statement:
        - Sid: PollySynthesisSnsTopicWrite
          Effect: Allow
          Action:
          - sns:Publish
          Resource:
          - Ref: PollySynthesisTopic
      - Statement:
        - Sid: AppsyncPermission
          Effect: Allow
          Action:
          - appsync:GraphQL
          Resource:
          - Fn::Sub: ${GraphqlApi.Arn}/*
      - Statement:
        - Sid: DynamoDB
          Effect: Allow
          Action:
          - dynamodb:*
          Resource:
          - Fn::Sub: ${FlashcardTable.Arn}/*
          - Fn::Sub: ${FlashcardTable.Arn}
      - Statement:
        - Sid: SQS
          Effect: Allow
          Action:
          - sqs:*
          Resource:
          - Fn::GetAtt:
            - PollySynthesisQueue
            - Arn
  PollySynthesisTopic:
    Type: AWS::SNS::Topic
    Properties: {}
  PollySynthesisSnsTopicHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://werberm-sandbox/d50c5119fb1e388386a716dae0d6ad51
      Handler: app.handler
      Runtime: nodejs8.10
      Environment:
        Variables:
          FLASHCARD_TABLE:
            Ref: FlashcardTable
      Events:
        SynthesisSnsEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: PollySynthesisTopic
      Policies:
      - Statement:
        - Sid: DynamoDBPermissions
          Effect: Allow
          Action:
          - dynamodb:*
          Resource:
          - Fn::GetAtt:
            - FlashcardTable
            - Arn
  GraphqlApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      AuthenticationType: AWS_IAM
      Name:
        Fn::Sub: ${AWS::StackName}-graphql-api
      LogConfig:
        CloudWatchLogsRoleArn:
          Fn::GetAtt:
          - AppSyncRole
          - Arn
        FieldLogLevel: ALL
  GraphqlSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DefinitionS3Location: s3://werberm-sandbox/appsync/flashcard-schema.graphql
  GraphqlDatasource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DynamoDBConfig:
        AwsRegion:
          Ref: AWS::Region
        TableName:
          Ref: FlashcardTable
        UseCallerCredentials: true
      Name:
        Fn::Sub: ${AWS::StackName}CardTable
      ServiceRoleArn:
        Fn::GetAtt:
        - AppSyncRole
        - Arn
      Type: AMAZON_DYNAMODB
  AppSyncRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - appsync.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /service-role/
      Policies:
      - PolicyName: DDB
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          - Effect: Allow
            Action:
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            Resource:
            - Fn::Sub: ${FlashcardTable.Arn}
            - Fn::Sub: ${FlashcardTable.Arn}/*
  GraphqlListCardsQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphqlSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DataSourceName:
        Fn::GetAtt:
        - GraphqlDatasource
        - Name
      Kind: UNIT
      TypeName: Query
      FieldName: listCards
      RequestMappingTemplate: "#set( $limit = $util.defaultIfNull($context.args.limit,\
        \ 10) )\n#set( $ListRequest = {\n  \"version\": \"2017-02-28\",\n  \"limit\"\
        : $limit\n} )\n#if( $context.args.nextToken )\n  #set( $ListRequest.nextToken\
        \ = \"$context.args.nextToken\" )\n#end\n#if( $context.args.filter )\n  #set(\
        \ $ListRequest.filter = $util.parseJson(\"$util.transform.toDynamoDBFilterExpression($ctx.args.filter)\"\
        ) )\n#end\n#if( !$util.isNull($modelQueryExpression) && !$util.isNullOrEmpty($modelQueryExpression.expression)\
        \ )\n  $util.qr($ListRequest.put(\"operation\", \"Query\"))\n  $util.qr($ListRequest.put(\"\
        query\", $modelQueryExpression))\n#else\n  $util.qr($ListRequest.put(\"operation\"\
        , \"Scan\"))\n#end\n$util.toJson($ListRequest)\n"
      ResponseMappingTemplate: '$util.toJson($ctx.result)

        '
  GraphqlSingleCardQueryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphqlSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DataSourceName:
        Fn::GetAtt:
        - GraphqlDatasource
        - Name
      Kind: UNIT
      TypeName: Query
      FieldName: singleCard
      RequestMappingTemplate: "{\n  \"version\": \"2017-02-28\",\n  \"operation\"\
        : \"GetItem\",\n  \"key\": {\n    \"card_id\": $util.dynamodb.toDynamoDBJson($ctx.args.card_id),\n\
        \  }\n}\n"
      ResponseMappingTemplate: '$util.toJson($ctx.result)

        '
  GraphqlCreateCardMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphqlSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DataSourceName:
        Fn::GetAtt:
        - GraphqlDatasource
        - Name
      Kind: UNIT
      TypeName: Mutation
      FieldName: createCard
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\"\
        \ : \"PutItem\",\n    \"key\" : {\n        ## If object \"id\" should come\
        \ from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)\n\
        \        \"card_id\": $util.dynamodb.toDynamoDBJson($util.autoId()),\n   \
        \ },\n    \"attributeValues\" : $util.dynamodb.toMapValuesJson($ctx.args)\n\
        }\n"
      ResponseMappingTemplate: '$util.toJson($ctx.result)

        '
  GraphqlDeleteCardMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphqlSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DataSourceName:
        Fn::GetAtt:
        - GraphqlDatasource
        - Name
      Kind: UNIT
      TypeName: Mutation
      FieldName: deleteCard
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\"\
        \ : \"DeleteItem\",\n    \"key\" : {\n        ## If your table's hash key\
        \ is not named 'id', update it here. **\n        \"card_id\" : { \"S\" : \"\
        ${ctx.args.card_id}\" }\n        ## If your table has a sort key, add it as\
        \ an item here. **\n    }\n}\n"
      ResponseMappingTemplate: '$util.toJson($ctx.result)

        '
  GraphqlUpdateCardMutationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphqlSchema
    Properties:
      ApiId:
        Fn::GetAtt:
        - GraphqlApi
        - ApiId
      DataSourceName:
        Fn::GetAtt:
        - GraphqlDatasource
        - Name
      Kind: UNIT
      TypeName: Mutation
      FieldName: updateCard
      RequestMappingTemplate: "{\n    \"version\" : \"2017-02-28\",\n    \"operation\"\
        \ : \"UpdateItem\",\n    \"key\" : {\n        \"card_id\" : { \"S\" : \"${context.arguments.card_id}\"\
        \ }\n    },\n\n    ## Set up some space to keep track of things you're updating\
        \ **\n    #set( $expNames  = {} )\n    #set( $expValues = {} )\n    #set(\
        \ $expSet = {} )\n    #set( $expRemove = [] )\n\n    ## Iterate through each\
        \ argument, skipping \"id\" and \"expectedVersion\" **\n    #foreach( $entry\
        \ in $context.arguments.entrySet() )\n        #if( $entry.key != \"card_id\"\
        )\n            #if( (!$entry.value) && (\"$!{entry.value}\" == \"\") )\n \
        \               ## If the argument is set to \"null\", then remove that attribute\
        \ from the item in DynamoDB **\n\n                #set( $discard = ${expRemove.add(\"\
        #${entry.key}\")} )\n                $!{expNames.put(\"#${entry.key}\", \"\
        $entry.key\")}\n            #else\n                ## Otherwise set (or update)\
        \ the attribute on the item in DynamoDB **\n\n                $!{expSet.put(\"\
        #${entry.key}\", \":${entry.key}\")}\n                $!{expNames.put(\"#${entry.key}\"\
        , \"$entry.key\")}\n                $!{expValues.put(\":${entry.key}\", {\
        \ \"S\" : \"${entry.value}\" })}\n            #end\n        #end\n    #end\n\
        \n    ## Start building the update expression, starting with attributes you're\
        \ going to SET **\n    #set( $expression = \"\" )\n    #if( !${expSet.isEmpty()}\
        \ )\n        #set( $expression = \"SET\" )\n        #foreach( $entry in $expSet.entrySet()\
        \ )\n            #set( $expression = \"${expression} ${entry.key} = ${entry.value}\"\
        \ )\n            #if ( $foreach.hasNext )\n                #set( $expression\
        \ = \"${expression},\" )\n            #end\n        #end\n    #end\n    \n\
        \    ## Continue building the update expression, adding attributes you're\
        \ going to REMOVE **\n    #if( !${expRemove.isEmpty()} )\n        #set( $expression\
        \ = \"${expression} REMOVE\" )\n\n        #foreach( $entry in $expRemove )\n\
        \            #set( $expression = \"${expression} ${entry}\" )\n          \
        \  #if ( $foreach.hasNext )\n                #set( $expression = \"${expression},\"\
        \ )\n            #end\n        #end\n    #end\n\n    ## Finally, write the\
        \ update expression into the document, along with any expressionNames and\
        \ expressionValues **\n    \"update\" : {\n        \"expression\" : \"${expression}\"\
        \n        #if( !${expNames.isEmpty()} )\n            ,\"expressionNames\"\
        \ : $utils.toJson($expNames)\n        #end\n        #if( !${expValues.isEmpty()}\
        \ )\n            ,\"expressionValues\" : $utils.toJson($expValues)\n     \
        \   #end\n    }\n}\n"
      ResponseMappingTemplate: '$util.toJson($ctx.result)

        '
  FlashcardUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Schema:
      - Name: email
        Required: true
        Mutable: true
      AutoVerifiedAttributes:
      - email
      EmailVerificationMessage: Your flashcard verification code is {####}
      EmailVerificationSubject: Flashcard verification code is {####}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      MfaConfiguration: 'OFF'
      SmsVerificationMessage: Your flashcard verification code is {####}
      SmsConfiguration:
        SnsCallerArn:
          Fn::GetAtt:
          - CognitoSnsRole
          - Arn
        ExternalId:
          Ref: IamExternalId
  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: FlashcardUserPool
    DependsOn: FlashcardUserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: true
      RefreshTokenValidity: 30
      UserPoolId:
        Ref: FlashcardUserPool
    DependsOn: FlashcardUserPool
  userpoolClientLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
    DependsOn: UserPoolClient
  UserPoolClientLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - ''
          - - const response = require('cfn-response');
            - const aws = require('aws-sdk');
            - const identity = new aws.CognitoIdentityServiceProvider();
            - exports.handler = (event, context, callback) => {
            - ' if (event.RequestType == ''Delete'') { '
            - '   response.send(event, context, response.SUCCESS, {})'
            - ' }'
            - ' if (event.RequestType == ''Update'' || event.RequestType == ''Create'')
              {'
            - '   const params = {'
            - '     ClientId: event.ResourceProperties.clientId,'
            - '     UserPoolId: event.ResourceProperties.userpoolId'
            - '   };'
            - '   identity.describeUserPoolClient(params).promise()'
            - '     .then((res) => {'
            - '       response.send(event, context, response.SUCCESS, {''appSecret'':
              res.UserPoolClient.ClientSecret});'
            - '     })'
            - '     .catch((err) => {'
            - '       response.send(event, context, response.FAILED, {err});'
            - '     });'
            - ' }'
            - '};'
      Handler: index.handler
      Runtime: nodejs8.10
      Timeout: '300'
      Role:
        Fn::GetAtt:
        - userpoolClientLambdaRole
        - Arn
    DependsOn: userpoolClientLambdaRole
  UserPoolClientInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - UserPoolClientLambda
        - Arn
      clientId:
        Ref: UserPoolClient
      userpoolId:
        Ref: FlashcardUserPool
    DependsOn: UserPoolClientLogPolicy
  CognitoSnsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: cognito-idp.amazonaws.com
          Action:
          - sts:AssumeRole
          Condition:
            StringEquals:
              sts:ExternalId:
                Ref: IamExternalId
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-cognito-sns-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: '*'
  UserPoolClientLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-cognito-idp-policy
      Roles:
      - Ref: userpoolClientLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:DescribeUserPoolClient
          Resource:
            Fn::GetAtt:
            - FlashcardUserPool
            - Arn
    DependsOn: UserPoolClientLambda
  UserPoolClientLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: ${AWS::StackName}-cognito-lambda-policy
      Roles:
      - Ref: userpoolClientLambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
            Fn::Sub:
            - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
            - region:
                Ref: AWS::Region
              account:
                Ref: AWS::AccountId
              lambda:
                Ref: UserPoolClientLambda
    DependsOn: UserPoolClientLambdaPolicy
  FlashcardIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::Sub:
          - cognito-idp.${region}.amazonaws.com/${client}
          - region:
              Ref: AWS::Region
            client:
              Ref: FlashcardUserPool
      - ClientId:
          Ref: UserPoolClientWeb
        ProviderName:
          Fn::Sub:
          - cognito-idp.${region}.amazonaws.com/${client}
          - region:
              Ref: AWS::Region
            client:
              Ref: FlashcardUserPool
      AllowUnauthenticatedIdentities: false
    DependsOn: UserPoolClientInputs
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: FlashcardIdentityPool
      Roles:
        unauthenticated:
          Fn::GetAtt:
          - IdentityPoolUnauthRole
          - Arn
        authenticated:
          Fn::GetAtt:
          - IdentityPoolAuthRole
          - Arn
    DependsOn: FlashcardIdentityPool
  IdentityPoolAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName: AppSync
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - appsync:*
            Resource:
            - '*'
  IdentityPoolUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
