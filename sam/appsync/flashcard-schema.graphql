schema {
        query: Query
        mutation: Mutation
    }

type Mutation {
    createCard(front_text: String!, back_text: String!): Card
    deleteCard(card_id: ID!): Card
    updateCard(
        card_id: ID!,
        front_text: String
        back_text: String
        back_audio: String
    ): Card
}

type Query {
    singleCard(card_id: ID!): Card
    listCards(filter: ModelCardFilterInput, limit: Int, nextToken: String): ModelCardConnection
}

type Card {
    card_id: ID!
    front_text: String!
    back_text: String!
    back_audio: String
}

type ModelCardConnection {
	items: [Card]
	nextToken: String
}
input ModelCardFilterInput {
	card_id: ModelIDFilterInput
	front_text: ModelStringFilterInput
	back_text: ModelStringFilterInput
	and: [ModelCardFilterInput]
	or: [ModelCardFilterInput]
	not: ModelCardFilterInput
}

input ModelStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input ModelIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}